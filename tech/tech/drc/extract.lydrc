<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>drc</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>drc_scripts</group-name>
 <menu-path>tools_menu.drc.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text># grabbed from src/klayout/testdata/drc/drcSimpleTests_11.drc

# source($drc_test_source)

# Drawing layers

nwl = input(1, 0)
# nwl_dp = input(2, 0)
diff = input(3, 0) 
pol = input(5, 0)
hpol = input(6,0)
cnt = input(7, 0)
ml1 = input(8, 0)
via1 = input(9, 0) 
ml2 = input(10, 0)
via12 = input(11, 0)
ml3 = input(12, 0)
text = input(13, 0)
frame = input(14, 0)
res = input(15, 0)
cap = input(16, 0)
dio = input(17, 0)
parea = input(18, 0)
narea = input(19, 0)
pad = input(20, 0)
dm_dcn = input(101, 0)
dm_pcn = input(102, 0)
dm_nscn = input(103, 0)
dm_pscn = input(104, 0)
dm_via11 = input(105, 0)
dm_via12 = input(106, 0)

# Special layer for bulk terminals

bulk        = make_layer

# Computed layers

pol_not_res  = pol - res
pol_in_res   = pol &amp; res

hpol_not_res  = hpol - res
hpol_in_res   = hpol &amp; res

diff_in_nwl = diff &amp; nwl
pdiff       = diff_in_nwl - narea
ntie        = diff_in_nwl &amp; narea
pgate       = pdiff &amp; pol_not_res
psd         = pdiff - pgate
#hv_pgate    = pgate &amp; thickox
#lv_pgate    = pgate - hv_pgate
lv_pgate = pgate
#hv_psd      = psd &amp; thickox
#lv_psd      = psd - thickox

diff_outside_nwl = diff - nwl
ndiff      = diff_outside_nwl - parea
ptie       = diff_outside_nwl &amp; parea
ngate      = ndiff &amp; pol_not_res
nsd        = ndiff - ngate
#hv_ngate   = ngate &amp; thickox
#lv_ngate   = ngate - hv_ngate
lv_ngate   = ngate
#hv_nsd     = nsd &amp; thickox
#lv_nsd     = nsd - thickox

# Resistor device extraction

class CustomResistorExtraction &lt; RBA::GenericDeviceExtractor

  def initialize(name, sheet_rho)
    self.name = name
    @sheet_rho = sheet_rho
  end
  
  def setup
  
    define_layer("M", "Marker")
    define_layer("C", "Conductor")
    define_layer("R", "Resistor")

    register_device_class (RBA::DeviceClassResistor::new);

  end
  
  def extract_devices(layer_geometry)
  
    marker = layer_geometry[0]
    conductor = layer_geometry[1]
    resistor = layer_geometry[2]
    
    conductor_geometry_index = 1

    resistor_merged = resistor.merged
    
    marker_edges = marker.merged.edges &amp; resistor_merged.edges
        
    resistor_merged.each do |r|
    
      connection_edges = marker_edges.interacting(RBA::Region::new(r))
      
      terminals = connection_edges.extended_out(1)
      
      if terminals.size != 2
        error("Resistor shape does not touch marker border in exactly two places", r)
      else
      
        # A = L*W
        # P = 2*(L+W)
        # -&gt; L = p+sqrt(p*p-A)
        # -&gt; W = p-sqrt(p*p-A)
        # (p=P/4)
        
        p = 0.25 * r.perimeter
        a = r.area
        
        d = Math.sqrt(p * p - a)
        l = p + d
        w = p - d
      puts "l=#{l} w=#{w} p=#{p} a=#{a} d=#{d}"  
        if w &gt; 1e-3
        
          device = create_device

          device.set_parameter(RBA::DeviceClassResistor::PARAM_R, @sheet_rho * l / w);

          define_terminal(device, RBA::DeviceClassResistor::TERMINAL_A, conductor_geometry_index, terminals[0]);
          define_terminal(device, RBA::DeviceClassResistor::TERMINAL_B, conductor_geometry_index, terminals[1]);
          
        end
      
      end
    
    end

  end
  
  def get_connectivity(layout, layers)

    # the layer definition is marker, conductor, resistor  
    # * resistor is used for extraction
    # * conductor is used for producing the terminals
    # * marker is included because it's required for the extraction
    
    marker = layers[0]
    conductor = layers[1]
    resistor = layers[2]
    
    conn = RBA::Connectivity::new
    
    conn.connect(resistor, resistor)
    conn.connect(conductor, resistor)
    conn.connect(marker, resistor)
    
    return conn;

  end
  
end
  


# Poly Resistor

# Assumes a sheet rho of 20 Ohm/Square fro R-poly resistor
res_ex = CustomResistorExtraction::new("RES", 20.0)
extract_devices(res_ex, { "C" =&gt; pol_not_res, "R" =&gt; pol_in_res, "M" =&gt; res })

# sheet roho of 7000 for HR-poly resistor
res_ex = CustomResistorExtraction::new("HRES", 7000.0)
extract_devices(res_ex, { "C" =&gt; hpol_not_res, "R" =&gt; hpol_in_res, "M" =&gt; res })

# PMOS transistor device extraction

#hvpmos_ex = RBA::DeviceExtractorMOS4Transistor::new("HVPMOS")
#extract_devices(hvpmos_ex, { "SD" =&gt; psd, "G" =&gt; hv_pgate, "P" =&gt; pol_not_res, "W" =&gt; nwl })

lvpmos_ex = RBA::DeviceExtractorMOS4Transistor::new("LVPMOS")
extract_devices(lvpmos_ex, { "SD" =&gt; psd, "G" =&gt; lv_pgate, "P" =&gt; pol_not_res, "W" =&gt; nwl })

# NMOS transistor device extraction

lvnmos_ex = RBA::DeviceExtractorMOS4Transistor::new("LVNMOS")
extract_devices(lvnmos_ex, { "SD" =&gt; nsd, "G" =&gt; lv_ngate, "P" =&gt; pol_not_res, "W" =&gt; bulk })

#hvnmos_ex = RBA::DeviceExtractorMOS4Transistor::new("HVNMOS")
#extract_devices(hvnmos_ex, { "SD" =&gt; nsd, "G" =&gt; hv_ngate, "P" =&gt; pol_not_res, "W" =&gt; bulk })


# Define connectivity for netlist extraction

# Inter-layer
connect(cnt,        ntie)
connect(cnt,        ptie)
connect(nwl,          ntie)
connect(psd,            cnt)
connect(nsd,            cnt)
connect(pol_not_res,   cnt)
connect(cnt,        ml1)
connect(ml1,         via1)
connect(via1,            ml2)

# Global connections
connect_global(ptie, "BULK")
connect_global(bulk, "BULK")

# Actually performs the extraction

netlist = l2n_data.netlist

# Write the netlist 

writer = RBA::NetlistSpiceWriter::new
path = RBA::CellView::active.filename.sub(/\.[^\.]*$/, "_ext.cir")
netlist.write(path, writer, "VDIV netlist before simplification")

# Netlist simplification 

# NOTE: use make_top_level_pins before combine_devices as the pin
# stops the three resistors to be combined into one
netlist.make_top_level_pins
netlist.combine_devices
netlist.purge
netlist.purge_nets
path = RBA::CellView::active.filename.sub(/\.[^\.]*$/, "_ext_simplified.cir")
netlist.write(path, writer, "VDIV netlist after simplification")
puts "#{path} created"

</text>
</klayout-macro>

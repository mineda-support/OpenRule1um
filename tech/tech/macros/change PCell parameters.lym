<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>module MinedaPCellCommonModule
  include RBA
  class ApplyPCellChanges
    include RBA

    def initialize
      app = RBA::Application.instance
      @mw = app.main_window
      lv = @mw.current_view
      selected_objects = lv.object_selection
      @config = {}
      if selected_objects.size &gt; 0
        selected_objects.each{|s|
          next unless s.is_cell_inst?
          cell_name = s.inst.cell.basic_name
          @config[cell_name] =s.inst.pcell_parameters_by_name
        }
      else
        raise 'No instances selected!'
      end
    end

    def change_pcell_parameters
      lv = @mw.current_view
      cv = lv.active_cellview
      dialog = QDialog.new(Application.instance.main_window)
      dialog.windowTitle = "Change PCell parameters for #{cv.technology}"
      mainLayout = QVBoxLayout::new(dialog)
      dialog.setLayout(mainLayout)
      editor = QPlainTextEdit.new(dialog)      
      editor.insertPlainText @config.to_yaml || ''
      mainLayout.addWidget(editor)
      
      # button boxes
      layout = QHBoxLayout.new(dialog)
      mainLayout.addLayout(layout)
      
      # Save button
      buttonSave = QPushButton.new(dialog)
      layout.addWidget(buttonSave)
      buttonSave.text = ' Save '
      buttonSave.clicked do
        settings_file = QFileDialog::getSaveFileName(@mw, 'Save File', File.dirname(cv.filename))
        File.open(settings_file, 'w'){|f| f.puts editor.document.toPlainText}
        puts "#{settings_file} saved"
      end
      
      # Load button
      buttonLoad = QPushButton.new(dialog)
      layout.addWidget(buttonLoad)
      buttonLoad.text = ' Load '
      buttonLoad.clicked do
        file = QFileDialog::getOpenFileName(@mw, 'Load File', File.dirname(cv.filename))
        editor.setPlainText File.read(file)
      end

      # OK button
      buttonOK = QPushButton.new(dialog)
      layout.addWidget(buttonOK)
      buttonOK.text = " OK "
      buttonOK.clicked do 
        dialog.accept()
        config = YAML.load editor.document.toPlainText
        puts config
        selected_objects = lv.object_selection
        selected_objects.each{|s|
          next unless s.is_cell_inst?
          cell_name = s.inst.cell.basic_name
          if params = config[cell_name]
            puts "update #{s.inst.cell.name} with #{params}"
            params.each_pair {|p, v|
              s.inst.change_pcell_parameter p, v
            }
          end
        }
      end
      # Cancel button
      cancel = QPushButton.new(dialog)
      layout.addWidget(cancel)
      cancel.text = "cancel"
      cancel.clicked do 
        dialog.accept()
      end
      dialog.exec
    end
  end
  apc = ApplyPCellChanges.new
  apc.change_pcell_parameters
end
</text>
</klayout-macro>
